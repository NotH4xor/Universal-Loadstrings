local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer
local espObjects = {}

-- Define ESP configurations
local espConfig = {
    {
        partName = "Main",
        partSize = Vector3.new(4.184000015258789, 6.843999862670898, 2.950000047683716),
        espLabel = "TC",
        espColor = Color3.new(0, 1, 0)
    },
    {
        partName = "EngineRotator",
        partSize = Vector3.new(0.5, 0.5, 0.5),
        espLabel = "OP",
        espColor = Color3.new(1.000000, 0.000000, 0.749020)
    }
}

local function isVector3Close(v1, v2, tolerance)
    tolerance = tolerance or 0.01
    return math.abs(v1.X - v2.X) <= tolerance and math.abs(v1.Y - v2.Y) <= tolerance and math.abs(v1.Z - v2.Z) <= tolerance
end

-- Function to create or update a drawing ESP
local function createOrUpdateESP(part, label, color)
    if not espObjects[part] then
        local drawing = Drawing.new("Text")
        drawing.Size = 18
        drawing.Center = true
        drawing.Outline = true
        drawing.OutlineColor = Color3.new(0, 0, 0)
        drawing.Color = color
        drawing.Visible = true
        espObjects[part] = drawing
    end
    espObjects[part].Text = label
end

-- Function to remove an ESP
local function removeESP(part)
    if espObjects[part] then
        espObjects[part]:Remove()
        espObjects[part] = nil
    end
end

-- Function to update ESP positions each frame
local function updateESP()
    for part, drawing in pairs(espObjects) do
        if part and part:IsDescendantOf(workspace) then
            local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
            if onScreen then
                drawing.Position = Vector2.new(screenPos.X, screenPos.Y)
                drawing.Visible = true
            else
                drawing.Visible = false
            end
        else
            removeESP(part)
        end
    end
end

-- Connect events
workspace.DescendantAdded:Connect(function(descendant)
    for _, config in ipairs(espConfig) do
        if descendant:IsA("BasePart") and descendant.Name == config.partName and isVector3Close(descendant.Size, config.partSize) then
            createOrUpdateESP(descendant, config.espLabel, config.espColor)
        end
    end
end)

workspace.DescendantRemoving:Connect(function(descendant)
    removeESP(descendant)
end)

-- Initial population of ESPs
for _, descendant in ipairs(workspace:GetDescendants()) do
    for _, config in ipairs(espConfig) do
        if descendant:IsA("BasePart") and descendant.Name == config.partName and isVector3Close(descendant.Size, config.partSize) then
            createOrUpdateESP(descendant, config.espLabel, config.espColor)
        end
    end
end

-- Update ESPs every frame
RunService.RenderStepped:Connect(updateESP)
